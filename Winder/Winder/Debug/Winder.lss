
Winder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000946  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000946  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800208  00800208  00000a02  2**0
                  ALLOC
  3 .eeprom       0000000f  00810000  00810000  00000a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000a88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001003  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cae  00000000  00000000  00001aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000755  00000000  00000000  00002799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000dc  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000685  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001b5  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c3       	rjmp	.+1598   	; 0x6a4 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e4       	ldi	r30, 0x46	; 70
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 30       	cpi	r26, 0x0D	; 13
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	40 d0       	rcall	.+128    	; 0x1a0 <main>
 120:	10 c4       	rjmp	.+2080   	; 0x942 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z19USART_send_hardwareh>:
}


/************************* Transmiterea unui byte UART_hardware *************************/
void USART_send_hardware(unsigned char data)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0)));
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 72       	andi	r24, 0x20	; 32
 13e:	99 27       	eor	r25, r25
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	89 2b       	or	r24, r25
 144:	09 f0       	breq	.+2      	; 0x148 <_Z19USART_send_hardwareh+0x24>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	22 23       	and	r18, r18
 14a:	09 f0       	breq	.+2      	; 0x14e <_Z19USART_send_hardwareh+0x2a>
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <_Z19USART_send_hardwareh+0xc>
	UDR0 = data;
 14e:	86 ec       	ldi	r24, 0xC6	; 198
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
}
 158:	00 00       	nop
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_Z24USART_putstring_hardwarePc>:


/************************* Transmiterea unui sir de caractere UART_hardware *************************/
void USART_putstring_hardware(char* StringPtr)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	1f 92       	push	r1
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
	while(*StringPtr != 0x00)
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	59 f0       	breq	.+22     	; 0x194 <_Z24USART_putstring_hardwarePc+0x32>
	{
		USART_send_hardware(*StringPtr);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	ce df       	rcall	.-100    	; 0x124 <_Z19USART_send_hardwareh>
		StringPtr++;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01


/************************* Transmiterea unui sir de caractere UART_hardware *************************/
void USART_putstring_hardware(char* StringPtr)
{
	while(*StringPtr != 0x00)
 192:	ef cf       	rjmp	.-34     	; 0x172 <_Z24USART_putstring_hardwarePc+0x10>
	{
		USART_send_hardware(*StringPtr);
		StringPtr++;
	}
}
 194:	00 00       	nop
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <main>:

int main(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	2e 97       	sbiw	r28, 0x0e	; 14
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	date=eeprom_read_byte(&V1);
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	bc d3       	rcall	.+1912   	; 0x932 <eeprom_read_byte>
 1ba:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	// Input/Output Ports initialization
	// Port A initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
 1be:	81 e2       	ldi	r24, 0x21	; 33
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTA=(0<<PA7) | (0<<PA6) | (0<<PA5) | (0<<PA4) | (0<<PA3) | (0<<PA2) | (0<<PA1) | (0<<PA0);
 1c6:	82 e2       	ldi	r24, 0x22	; 34
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	10 82       	st	Z, r1

	// Port B initialization
	// Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 1ce:	84 e2       	ldi	r24, 0x24	; 36
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 e8       	ldi	r18, 0x80	; 128
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTB=(0<<PB7) | (0<<PB6) | (0<<PB5) | (0<<PB4) | (0<<PB3) | (0<<PB2) | (0<<PB1) | (0<<PB0);
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	10 82       	st	Z, r1

	// Port C initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 1e0:	87 e2       	ldi	r24, 0x27	; 39
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PC7) | (0<<PC6) | (0<<PC5) | (0<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 1e8:	88 e2       	ldi	r24, 0x28	; 40
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	10 82       	st	Z, r1

	// Port D initialization
	// Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 1f0:	8a e2       	ldi	r24, 0x2A	; 42
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	20 e8       	ldi	r18, 0x80	; 128
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PD7) | (0<<PD6) | (0<<PD5) | (0<<PD4) | (0<<PD3) | (0<<PD2) | (0<<PD1) | (0<<PD0);
 1fa:	8b e2       	ldi	r24, 0x2B	; 43
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	10 82       	st	Z, r1

	// Port E initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
	DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (1<<DDE1) | (0<<DDE0);
 202:	8d e2       	ldi	r24, 0x2D	; 45
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	22 e0       	ldi	r18, 0x02	; 2
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T
	PORTE=(0<<PE7) | (0<<PE6) | (0<<PE5) | (0<<PE4) | (0<<PE3) | (0<<PE2) | (0<<PE1) | (0<<PE0);
 20c:	8e e2       	ldi	r24, 0x2E	; 46
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	10 82       	st	Z, r1

	// Port F initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
	DDRF=(1<<DDF7) | (1<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	27 ec       	ldi	r18, 0xC7	; 199
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
	PORTF=(0<<PF7) | (0<<PF6) | (0<<PF5) | (0<<PF4) | (0<<PF3) | (0<<PF2) | (0<<PF1) | (0<<PF0);
 21e:	81 e3       	ldi	r24, 0x31	; 49
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	10 82       	st	Z, r1

	// Port G initialization
	// Function: Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRG=(0<<DDG5) | (0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
 226:	83 e3       	ldi	r24, 0x33	; 51
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	10 82       	st	Z, r1
	// State: Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTG=(0<<PG5) | (0<<PG4) | (0<<PG3) | (0<<PG2) | (0<<PG1) | (0<<PG0);
 22e:	84 e3       	ldi	r24, 0x34	; 52
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	10 82       	st	Z, r1

	// Port H initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRH=(0<<DDH7) | (0<<DDH6) | (0<<DDH5) | (0<<DDH4) | (0<<DDH3) | (0<<DDH2) | (0<<DDH1) | (0<<DDH0);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	fc 01       	movw	r30, r24
 23c:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTH=(0<<PH7) | (0<<PH6) | (0<<PH5) | (0<<PH4) | (0<<PH3) | (0<<PH2) | (0<<PH1) | (0<<PH0);
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	fc 01       	movw	r30, r24
 244:	10 82       	st	Z, r1

	// Port J initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRJ=(0<<DDJ7) | (0<<DDJ6) | (0<<DDJ5) | (0<<DDJ4) | (0<<DDJ3) | (0<<DDJ2) | (0<<DDJ1) | (0<<DDJ0);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	fc 01       	movw	r30, r24
 24c:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTJ=(0<<PJ7) | (0<<PJ6) | (0<<PJ5) | (0<<PJ4) | (0<<PJ3) | (0<<PJ2) | (0<<PJ1) | (0<<PJ0);
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	fc 01       	movw	r30, r24
 254:	10 82       	st	Z, r1

	// Port K initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRK=(0<<DDK7) | (0<<DDK6) | (0<<DDK5) | (0<<DDK4) | (0<<DDK3) | (0<<DDK2) | (0<<DDK1) | (0<<DDK0);
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	fc 01       	movw	r30, r24
 25c:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTK=(0<<PK7) | (0<<PK6) | (0<<PK5) | (0<<PK4) | (0<<PK3) | (0<<PK2) | (0<<PK1) | (0<<PK0);
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	fc 01       	movw	r30, r24
 264:	10 82       	st	Z, r1

	// Port L initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRL=(0<<DDL7) | (0<<DDL6) | (0<<DDL5) | (0<<DDL4) | (0<<DDL3) | (0<<DDL2) | (0<<DDL1) | (0<<DDL0);
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	fc 01       	movw	r30, r24
 26c:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTL=(0<<PL7) | (0<<PL6) | (0<<PL5) | (0<<PL4) | (0<<PL3) | (0<<PL2) | (0<<PL1) | (0<<PL0);
 26e:	8b e0       	ldi	r24, 0x0B	; 11
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	fc 01       	movw	r30, r24
 274:	10 82       	st	Z, r1
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 276:	84 e4       	ldi	r24, 0x44	; 68
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	10 82       	st	Z, r1
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 27e:	85 e4       	ldi	r24, 0x45	; 69
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	10 82       	st	Z, r1
	TCNT0=0x00;
 286:	86 e4       	ldi	r24, 0x46	; 70
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	10 82       	st	Z, r1
	OCR0A=0x00;
 28e:	87 e4       	ldi	r24, 0x47	; 71
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fc 01       	movw	r30, r24
 294:	10 82       	st	Z, r1
	OCR0B=0x00;
 296:	88 e4       	ldi	r24, 0x48	; 72
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	10 82       	st	Z, r1
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	10 82       	st	Z, r1
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 2a6:	81 e8       	ldi	r24, 0x81	; 129
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	10 82       	st	Z, r1
	TCNT1H=0x00;
 2ae:	85 e8       	ldi	r24, 0x85	; 133
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	10 82       	st	Z, r1
	TCNT1L=0x00;
 2b6:	84 e8       	ldi	r24, 0x84	; 132
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	10 82       	st	Z, r1
	ICR1H=0x00;
 2be:	87 e8       	ldi	r24, 0x87	; 135
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	10 82       	st	Z, r1
	ICR1L=0x00;
 2c6:	86 e8       	ldi	r24, 0x86	; 134
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	10 82       	st	Z, r1
	OCR1AH=0x00;
 2ce:	89 e8       	ldi	r24, 0x89	; 137
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	10 82       	st	Z, r1
	OCR1AL=0x00;
 2d6:	88 e8       	ldi	r24, 0x88	; 136
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	10 82       	st	Z, r1
	OCR1BH=0x00;
 2de:	8b e8       	ldi	r24, 0x8B	; 139
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	10 82       	st	Z, r1
	OCR1BL=0x00;
 2e6:	8a e8       	ldi	r24, 0x8A	; 138
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	10 82       	st	Z, r1
	OCR1CH=0x00;
 2ee:	8d e8       	ldi	r24, 0x8D	; 141
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fc 01       	movw	r30, r24
 2f4:	10 82       	st	Z, r1
	OCR1CL=0x00;
 2f6:	8c e8       	ldi	r24, 0x8C	; 140
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	fc 01       	movw	r30, r24
 2fc:	10 82       	st	Z, r1
	// Clock source: System Clock
	// Clock value: Timer2 Stopped
	// Mode: Normal top=0xFF
	// OC2A output: Disconnected
	// OC2B output: Disconnected
	ASSR=(0<<EXCLK) | (0<<AS2);
 2fe:	86 eb       	ldi	r24, 0xB6	; 182
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	fc 01       	movw	r30, r24
 304:	10 82       	st	Z, r1
	TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
 306:	80 eb       	ldi	r24, 0xB0	; 176
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	fc 01       	movw	r30, r24
 30c:	10 82       	st	Z, r1
	TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 30e:	81 eb       	ldi	r24, 0xB1	; 177
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	10 82       	st	Z, r1
	TCNT2=0x00;
 316:	82 eb       	ldi	r24, 0xB2	; 178
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	10 82       	st	Z, r1
	OCR2A=0x00;
 31e:	83 eb       	ldi	r24, 0xB3	; 179
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	fc 01       	movw	r30, r24
 324:	10 82       	st	Z, r1
	OCR2B=0x00;
 326:	84 eb       	ldi	r24, 0xB4	; 180
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	10 82       	st	Z, r1
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
 32e:	80 e9       	ldi	r24, 0x90	; 144
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	fc 01       	movw	r30, r24
 334:	10 82       	st	Z, r1
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
 336:	81 e9       	ldi	r24, 0x91	; 145
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	10 82       	st	Z, r1
	TCNT3H=0x00;
 33e:	85 e9       	ldi	r24, 0x95	; 149
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1
	TCNT3L=0x00;
 346:	84 e9       	ldi	r24, 0x94	; 148
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fc 01       	movw	r30, r24
 34c:	10 82       	st	Z, r1
	ICR3H=0x00;
 34e:	87 e9       	ldi	r24, 0x97	; 151
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	10 82       	st	Z, r1
	ICR3L=0x00;
 356:	86 e9       	ldi	r24, 0x96	; 150
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	10 82       	st	Z, r1
	OCR3AH=0x00;
 35e:	89 e9       	ldi	r24, 0x99	; 153
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	10 82       	st	Z, r1
	OCR3AL=0x00;
 366:	88 e9       	ldi	r24, 0x98	; 152
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fc 01       	movw	r30, r24
 36c:	10 82       	st	Z, r1
	OCR3BH=0x00;
 36e:	8b e9       	ldi	r24, 0x9B	; 155
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	10 82       	st	Z, r1
	OCR3BL=0x00;
 376:	8a e9       	ldi	r24, 0x9A	; 154
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	10 82       	st	Z, r1
	OCR3CH=0x00;
 37e:	8d e9       	ldi	r24, 0x9D	; 157
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	10 82       	st	Z, r1
	OCR3CL=0x00;
 386:	8c e9       	ldi	r24, 0x9C	; 156
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	10 82       	st	Z, r1
	// Timer4 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR4A=(0<<COM4A1) | (0<<COM4A0) | (0<<COM4B1) | (0<<COM4B0) | (0<<COM4C1) | (0<<COM4C0) | (0<<WGM41) | (0<<WGM40);
 38e:	80 ea       	ldi	r24, 0xA0	; 160
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	10 82       	st	Z, r1
	TCCR4B=(0<<ICNC4) | (0<<ICES4) | (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (0<<CS41) | (0<<CS40);
 396:	81 ea       	ldi	r24, 0xA1	; 161
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	fc 01       	movw	r30, r24
 39c:	10 82       	st	Z, r1
	TCNT4H=0x00;
 39e:	85 ea       	ldi	r24, 0xA5	; 165
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	10 82       	st	Z, r1
	TCNT4L=0x00;
 3a6:	84 ea       	ldi	r24, 0xA4	; 164
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fc 01       	movw	r30, r24
 3ac:	10 82       	st	Z, r1
	ICR4H=0x00;
 3ae:	87 ea       	ldi	r24, 0xA7	; 167
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	fc 01       	movw	r30, r24
 3b4:	10 82       	st	Z, r1
	ICR4L=0x00;
 3b6:	86 ea       	ldi	r24, 0xA6	; 166
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	fc 01       	movw	r30, r24
 3bc:	10 82       	st	Z, r1
	OCR4AH=0x00;
 3be:	89 ea       	ldi	r24, 0xA9	; 169
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	10 82       	st	Z, r1
	OCR4AL=0x00;
 3c6:	88 ea       	ldi	r24, 0xA8	; 168
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	fc 01       	movw	r30, r24
 3cc:	10 82       	st	Z, r1
	OCR4BH=0x00;
 3ce:	8b ea       	ldi	r24, 0xAB	; 171
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	10 82       	st	Z, r1
	OCR4BL=0x00;
 3d6:	8a ea       	ldi	r24, 0xAA	; 170
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	10 82       	st	Z, r1
	OCR4CH=0x00;
 3de:	8d ea       	ldi	r24, 0xAD	; 173
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	10 82       	st	Z, r1
	OCR4CL=0x00;
 3e6:	8c ea       	ldi	r24, 0xAC	; 172
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	10 82       	st	Z, r1
	// Timer5 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR5A=(0<<COM5A1) | (0<<COM5A0) | (0<<COM5B1) | (0<<COM5B0) | (0<<COM5C1) | (0<<COM5C0) | (0<<WGM51) | (0<<WGM50);
 3ee:	80 e2       	ldi	r24, 0x20	; 32
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	fc 01       	movw	r30, r24
 3f4:	10 82       	st	Z, r1
	TCCR5B=(0<<ICNC5) | (0<<ICES5) | (0<<WGM53) | (0<<WGM52) | (0<<CS52) | (0<<CS51) | (0<<CS50);
 3f6:	81 e2       	ldi	r24, 0x21	; 33
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	fc 01       	movw	r30, r24
 3fc:	10 82       	st	Z, r1
	TCNT5H=0x00;
 3fe:	85 e2       	ldi	r24, 0x25	; 37
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	fc 01       	movw	r30, r24
 404:	10 82       	st	Z, r1
	TCNT5L=0x00;
 406:	84 e2       	ldi	r24, 0x24	; 36
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	fc 01       	movw	r30, r24
 40c:	10 82       	st	Z, r1
	ICR5H=0x00;
 40e:	87 e2       	ldi	r24, 0x27	; 39
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	fc 01       	movw	r30, r24
 414:	10 82       	st	Z, r1
	ICR5L=0x00;
 416:	86 e2       	ldi	r24, 0x26	; 38
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	fc 01       	movw	r30, r24
 41c:	10 82       	st	Z, r1
	OCR5AH=0x00;
 41e:	89 e2       	ldi	r24, 0x29	; 41
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	fc 01       	movw	r30, r24
 424:	10 82       	st	Z, r1
	OCR5AL=0x00;
 426:	88 e2       	ldi	r24, 0x28	; 40
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	fc 01       	movw	r30, r24
 42c:	10 82       	st	Z, r1
	OCR5BH=0x00;
 42e:	8b e2       	ldi	r24, 0x2B	; 43
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	fc 01       	movw	r30, r24
 434:	10 82       	st	Z, r1
	OCR5BL=0x00;
 436:	8a e2       	ldi	r24, 0x2A	; 42
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	fc 01       	movw	r30, r24
 43c:	10 82       	st	Z, r1
	OCR5CH=0x00;
 43e:	8d e2       	ldi	r24, 0x2D	; 45
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	fc 01       	movw	r30, r24
 444:	10 82       	st	Z, r1
	OCR5CL=0x00;
 446:	8c e2       	ldi	r24, 0x2C	; 44
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	fc 01       	movw	r30, r24
 44c:	10 82       	st	Z, r1

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 44e:	8e e6       	ldi	r24, 0x6E	; 110
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	10 82       	st	Z, r1

	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1C) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
 456:	8f e6       	ldi	r24, 0x6F	; 111
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	10 82       	st	Z, r1

	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 45e:	80 e7       	ldi	r24, 0x70	; 112
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	10 82       	st	Z, r1

	// Timer/Counter 3 Interrupt(s) initialization
	TIMSK3=(0<<ICIE3) | (0<<OCIE3C) | (0<<OCIE3B) | (0<<OCIE3A) | (0<<TOIE3);
 466:	81 e7       	ldi	r24, 0x71	; 113
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	fc 01       	movw	r30, r24
 46c:	10 82       	st	Z, r1

	// Timer/Counter 4 Interrupt(s) initialization
	TIMSK4=(0<<ICIE4) | (0<<OCIE4C) | (0<<OCIE4B) | (0<<OCIE4A) | (0<<TOIE4);
 46e:	82 e7       	ldi	r24, 0x72	; 114
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	10 82       	st	Z, r1

	// Timer/Counter 5 Interrupt(s) initialization
	TIMSK5=(0<<ICIE5) | (0<<OCIE5C) | (0<<OCIE5B) | (0<<OCIE5A) | (0<<TOIE5);
 476:	83 e7       	ldi	r24, 0x73	; 115
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	fc 01       	movw	r30, r24
 47c:	10 82       	st	Z, r1
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: Off
	// INT7: Off
	EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 47e:	89 e6       	ldi	r24, 0x69	; 105
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	fc 01       	movw	r30, r24
 484:	10 82       	st	Z, r1
	EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
 486:	8a e6       	ldi	r24, 0x6A	; 106
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	fc 01       	movw	r30, r24
 48c:	10 82       	st	Z, r1
	EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
 48e:	8d e3       	ldi	r24, 0x3D	; 61
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	fc 01       	movw	r30, r24
 494:	10 82       	st	Z, r1
	// PCINT19 interrupt: Off
	// PCINT20 interrupt: Off
	// PCINT21 interrupt: Off
	// PCINT22 interrupt: Off
	// PCINT23 interrupt: Off
	PCMSK0=(0<<PCINT7) | (0<<PCINT6) | (0<<PCINT5) | (0<<PCINT4) | (0<<PCINT3) | (0<<PCINT2) | (0<<PCINT1) | (0<<PCINT0);
 496:	8b e6       	ldi	r24, 0x6B	; 107
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1
	PCMSK1=(0<<PCINT15) | (0<<PCINT14) | (0<<PCINT13) | (0<<PCINT12) | (0<<PCINT11) | (0<<PCINT10) | (0<<PCINT9) | (0<<PCINT8);
 49e:	8c e6       	ldi	r24, 0x6C	; 108
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	10 82       	st	Z, r1
	PCMSK2=(0<<PCINT23) | (0<<PCINT22) | (0<<PCINT21) | (0<<PCINT20) | (0<<PCINT19) | (0<<PCINT18) | (0<<PCINT17) | (0<<PCINT16);
 4a6:	8d e6       	ldi	r24, 0x6D	; 109
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	10 82       	st	Z, r1
	PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 4ae:	88 e6       	ldi	r24, 0x68	; 104
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	fc 01       	movw	r30, r24
 4b4:	10 82       	st	Z, r1
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	10 82       	st	Z, r1
	UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 4be:	81 ec       	ldi	r24, 0xC1	; 193
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	28 e9       	ldi	r18, 0x98	; 152
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
	UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
 4c8:	82 ec       	ldi	r24, 0xC2	; 194
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	26 e0       	ldi	r18, 0x06	; 6
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	UBRR0H=0x00;
 4d2:	85 ec       	ldi	r24, 0xC5	; 197
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	fc 01       	movw	r30, r24
 4d8:	10 82       	st	Z, r1
	UBRR0L=0x67;
 4da:	84 ec       	ldi	r24, 0xC4	; 196
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	27 e6       	ldi	r18, 0x67	; 103
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18

	// USART1 initialization
	// USART1 disabled
	UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
 4e4:	89 ec       	ldi	r24, 0xC9	; 201
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	10 82       	st	Z, r1

	// USART2 initialization
	// USART2 disabled
	UCSR2B=(0<<RXCIE2) | (0<<TXCIE2) | (0<<UDRIE2) | (0<<RXEN2) | (0<<TXEN2) | (0<<UCSZ22) | (0<<RXB82) | (0<<TXB82);
 4ec:	81 ed       	ldi	r24, 0xD1	; 209
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	fc 01       	movw	r30, r24
 4f2:	10 82       	st	Z, r1

	// USART3 initialization
	// USART3 disabled
	UCSR3B=(0<<RXCIE3) | (0<<TXCIE3) | (0<<UDRIE3) | (0<<RXEN3) | (0<<TXEN3) | (0<<UCSZ32) | (0<<RXB83) | (0<<TXB83);
 4f4:	81 e3       	ldi	r24, 0x31	; 49
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	fc 01       	movw	r30, r24
 4fa:	10 82       	st	Z, r1
	// Analog Comparator: Off
	// The Analog Comparator's positive input is
	// connected to the AIN0 pin
	// The Analog Comparator's negative input is
	// connected to the AIN1 pin
	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
 4fc:	80 e5       	ldi	r24, 0x50	; 80
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	20 e8       	ldi	r18, 0x80	; 128
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
	ADCSRB=(0<<ACME);
 506:	8b e7       	ldi	r24, 0x7B	; 123
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	10 82       	st	Z, r1
	// Digital input buffer on AIN0: On
	// Digital input buffer on AIN1: On
	DIDR1=(0<<AIN0D) | (0<<AIN1D);
 50e:	8f e7       	ldi	r24, 0x7F	; 127
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	10 82       	st	Z, r1

	// ADC initialization
	// ADC disabled
	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 516:	8a e7       	ldi	r24, 0x7A	; 122
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	10 82       	st	Z, r1

	// SPI initialization
	// SPI disabled
	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 51e:	8c e4       	ldi	r24, 0x4C	; 76
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	10 82       	st	Z, r1

	// TWI initialization
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
 526:	8c eb       	ldi	r24, 0xBC	; 188
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	fc 01       	movw	r30, r24
 52c:	10 82       	st	Z, r1
	
	sei();
 52e:	78 94       	sei
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	aa e7       	ldi	r26, 0x7A	; 122
 536:	b4 e4       	ldi	r27, 0x44	; 68
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	ab 83       	std	Y+3, r26	; 0x03
 53e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 540:	20 e0       	ldi	r18, 0x00	; 0
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	4a e7       	ldi	r20, 0x7A	; 122
 546:	55 e4       	ldi	r21, 0x45	; 69
 548:	69 81       	ldd	r22, Y+1	; 0x01
 54a:	7a 81       	ldd	r23, Y+2	; 0x02
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	65 d1       	rcall	.+714    	; 0x81c <__mulsf3>
 552:	dc 01       	movw	r26, r24
 554:	cb 01       	movw	r24, r22
 556:	8d 83       	std	Y+5, r24	; 0x05
 558:	9e 83       	std	Y+6, r25	; 0x06
 55a:	af 83       	std	Y+7, r26	; 0x07
 55c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	40 e8       	ldi	r20, 0x80	; 128
 564:	5f e3       	ldi	r21, 0x3F	; 63
 566:	6d 81       	ldd	r22, Y+5	; 0x05
 568:	7e 81       	ldd	r23, Y+6	; 0x06
 56a:	8f 81       	ldd	r24, Y+7	; 0x07
 56c:	98 85       	ldd	r25, Y+8	; 0x08
 56e:	d5 d0       	rcall	.+426    	; 0x71a <__cmpsf2>
 570:	88 23       	and	r24, r24
 572:	2c f4       	brge	.+10     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
		__ticks = 1;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	9a 87       	std	Y+10, r25	; 0x0a
 57a:	89 87       	std	Y+9, r24	; 0x09
 57c:	3a c0       	rjmp	.+116    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
	else if (__tmp > 65535)
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	3f ef       	ldi	r19, 0xFF	; 255
 582:	4f e7       	ldi	r20, 0x7F	; 127
 584:	57 e4       	ldi	r21, 0x47	; 71
 586:	6d 81       	ldd	r22, Y+5	; 0x05
 588:	7e 81       	ldd	r23, Y+6	; 0x06
 58a:	8f 81       	ldd	r24, Y+7	; 0x07
 58c:	98 85       	ldd	r25, Y+8	; 0x08
 58e:	42 d1       	rcall	.+644    	; 0x814 <__gesf2>
 590:	18 16       	cp	r1, r24
 592:	34 f5       	brge	.+76     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	40 e2       	ldi	r20, 0x20	; 32
 59a:	51 e4       	ldi	r21, 0x41	; 65
 59c:	69 81       	ldd	r22, Y+1	; 0x01
 59e:	7a 81       	ldd	r23, Y+2	; 0x02
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	9c 81       	ldd	r25, Y+4	; 0x04
 5a4:	3b d1       	rcall	.+630    	; 0x81c <__mulsf3>
 5a6:	dc 01       	movw	r26, r24
 5a8:	cb 01       	movw	r24, r22
 5aa:	bc 01       	movw	r22, r24
 5ac:	cd 01       	movw	r24, r26
 5ae:	b9 d0       	rcall	.+370    	; 0x722 <__fixunssfsi>
 5b0:	dc 01       	movw	r26, r24
 5b2:	cb 01       	movw	r24, r22
 5b4:	9a 87       	std	Y+10, r25	; 0x0a
 5b6:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 5b8:	89 85       	ldd	r24, Y+9	; 0x09
 5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 5bc:	89 2b       	or	r24, r25
 5be:	19 f1       	breq	.+70     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5c0:	80 e9       	ldi	r24, 0x90	; 144
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	9c 87       	std	Y+12, r25	; 0x0c
 5c6:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 5c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 5ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d0:	9c 87       	std	Y+12, r25	; 0x0c
 5d2:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5d4:	89 85       	ldd	r24, Y+9	; 0x09
 5d6:	9a 85       	ldd	r25, Y+10	; 0x0a
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	9a 87       	std	Y+10, r25	; 0x0a
 5dc:	89 87       	std	Y+9, r24	; 0x09
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5de:	ec cf       	rjmp	.-40     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5e0:	6d 81       	ldd	r22, Y+5	; 0x05
 5e2:	7e 81       	ldd	r23, Y+6	; 0x06
 5e4:	8f 81       	ldd	r24, Y+7	; 0x07
 5e6:	98 85       	ldd	r25, Y+8	; 0x08
 5e8:	9c d0       	rcall	.+312    	; 0x722 <__fixunssfsi>
 5ea:	dc 01       	movw	r26, r24
 5ec:	cb 01       	movw	r24, r22
 5ee:	9a 87       	std	Y+10, r25	; 0x0a
 5f0:	89 87       	std	Y+9, r24	; 0x09
 5f2:	89 85       	ldd	r24, Y+9	; 0x09
 5f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5f6:	9e 87       	std	Y+14, r25	; 0x0e
 5f8:	8d 87       	std	Y+13, r24	; 0x0d
 5fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 5fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 602:	9e 87       	std	Y+14, r25	; 0x0e
 604:	8d 87       	std	Y+13, r24	; 0x0d
	
    while (1) 
		{
			_delay_ms(1000);
			sprintf(Transmite_buf, "Hello\n");
 606:	87 e0       	ldi	r24, 0x07	; 7
 608:	e0 e0       	ldi	r30, 0x00	; 0
 60a:	f2 e0       	ldi	r31, 0x02	; 2
 60c:	a9 e0       	ldi	r26, 0x09	; 9
 60e:	b3 e0       	ldi	r27, 0x03	; 3
 610:	01 90       	ld	r0, Z+
 612:	0d 92       	st	X+, r0
			USART_send_hardware(date);
 614:	8a 95       	dec	r24
 616:	e1 f7       	brne	.-8      	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 618:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
			USART_putstring_hardware(Transmite_buf);
 61c:	83 dd       	rcall	.-1274   	; 0x124 <_Z19USART_send_hardwareh>
 61e:	89 e0       	ldi	r24, 0x09	; 9
 620:	93 e0       	ldi	r25, 0x03	; 3
 622:	9f dd       	rcall	.-1218   	; 0x162 <_Z24USART_putstring_hardwarePc>
			PORTB^=(1<<PB7);
 624:	85 e2       	ldi	r24, 0x25	; 37
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	25 e2       	ldi	r18, 0x25	; 37
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	f9 01       	movw	r30, r18
 62e:	30 81       	ld	r19, Z
 630:	20 e8       	ldi	r18, 0x80	; 128
 632:	23 27       	eor	r18, r19
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18
			while(Receive_C>0)
 638:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <Receive_C>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	99 23       	and	r25, r25
 640:	09 f4       	brne	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	88 23       	and	r24, r24
 646:	01 f1       	breq	.+64     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
				{
					Transmite_buf[Transmite_T]=Receive_buf[Receive_R];
 648:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <Transmite_T>
 64c:	88 2f       	mov	r24, r24
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <Receive_R>
 654:	22 2f       	mov	r18, r18
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	27 5f       	subi	r18, 0xF7	; 247
 65a:	3d 4f       	sbci	r19, 0xFD	; 253
 65c:	f9 01       	movw	r30, r18
 65e:	20 81       	ld	r18, Z
 660:	87 5f       	subi	r24, 0xF7	; 247
 662:	9c 4f       	sbci	r25, 0xFC	; 252
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
					Receive_R++;
 668:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <Receive_R>
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <Receive_R>
					Receive_C--;
 672:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <Receive_C>
 676:	81 50       	subi	r24, 0x01	; 1
 678:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <Receive_C>
					Transmite_T++;
 67c:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <Transmite_T>
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <Transmite_T>
			_delay_ms(1000);
			sprintf(Transmite_buf, "Hello\n");
			USART_send_hardware(date);
			USART_putstring_hardware(Transmite_buf);
			PORTB^=(1<<PB7);
			while(Receive_C>0)
 686:	d8 cf       	rjmp	.-80     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
					Transmite_buf[Transmite_T]=Receive_buf[Receive_R];
					Receive_R++;
					Receive_C--;
					Transmite_T++;
				}
			Transmite_buf[Transmite_T]=0x00;
 688:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <Transmite_T>
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	87 5f       	subi	r24, 0xF7	; 247
 692:	9c 4f       	sbci	r25, 0xFC	; 252
 694:	fc 01       	movw	r30, r24
			USART_putstring_hardware(Transmite_buf);
 696:	10 82       	st	Z, r1
 698:	89 e0       	ldi	r24, 0x09	; 9
 69a:	93 e0       	ldi	r25, 0x03	; 3
 69c:	62 dd       	rcall	.-1340   	; 0x162 <_Z24USART_putstring_hardwarePc>
			Transmite_T=0;
 69e:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <Transmite_T>
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
	
	sei();
	
    while (1) 
 6a2:	46 cf       	rjmp	.-372    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>

000006a4 <__vector_25>:
			Transmite_T=0;
		}
}

ISR(USART0_RX_vect)
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 6b4:	0f 92       	push	r0
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
Receive_buf[Receive_W] = UDR0;	
 6ca:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <Receive_W>
 6ce:	88 2f       	mov	r24, r24
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	26 ec       	ldi	r18, 0xC6	; 198
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	f9 01       	movw	r30, r18
 6d8:	20 81       	ld	r18, Z
 6da:	87 5f       	subi	r24, 0xF7	; 247
 6dc:	9d 4f       	sbci	r25, 0xFD	; 253
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
Receive_W++;							// pregatirea adresei pentru urmatorul byte ce va veni in port
 6e2:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <Receive_W>
 6e6:	8f 5f       	subi	r24, 0xFF	; 255
 6e8:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <Receive_W>
Receive_C++;
 6ec:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <Receive_C>
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <Receive_C>
 6f6:	00 00       	nop
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	ff 91       	pop	r31
 6fe:	ef 91       	pop	r30
 700:	9f 91       	pop	r25
 702:	8f 91       	pop	r24
 704:	3f 91       	pop	r19
 706:	2f 91       	pop	r18
 708:	0f 90       	pop	r0
 70a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 70e:	0f 90       	pop	r0
 710:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 714:	0f 90       	pop	r0
 716:	1f 90       	pop	r1
 718:	18 95       	reti

0000071a <__cmpsf2>:
 71a:	2f d0       	rcall	.+94     	; 0x77a <__fp_cmp>
 71c:	08 f4       	brcc	.+2      	; 0x720 <__cmpsf2+0x6>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	08 95       	ret

00000722 <__fixunssfsi>:
 722:	57 d0       	rcall	.+174    	; 0x7d2 <__fp_splitA>
 724:	88 f0       	brcs	.+34     	; 0x748 <__fixunssfsi+0x26>
 726:	9f 57       	subi	r25, 0x7F	; 127
 728:	90 f0       	brcs	.+36     	; 0x74e <__fixunssfsi+0x2c>
 72a:	b9 2f       	mov	r27, r25
 72c:	99 27       	eor	r25, r25
 72e:	b7 51       	subi	r27, 0x17	; 23
 730:	a0 f0       	brcs	.+40     	; 0x75a <__fixunssfsi+0x38>
 732:	d1 f0       	breq	.+52     	; 0x768 <__fixunssfsi+0x46>
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	1a f0       	brmi	.+6      	; 0x744 <__fixunssfsi+0x22>
 73e:	ba 95       	dec	r27
 740:	c9 f7       	brne	.-14     	; 0x734 <__fixunssfsi+0x12>
 742:	12 c0       	rjmp	.+36     	; 0x768 <__fixunssfsi+0x46>
 744:	b1 30       	cpi	r27, 0x01	; 1
 746:	81 f0       	breq	.+32     	; 0x768 <__fixunssfsi+0x46>
 748:	5e d0       	rcall	.+188    	; 0x806 <__fp_zero>
 74a:	b1 e0       	ldi	r27, 0x01	; 1
 74c:	08 95       	ret
 74e:	5b c0       	rjmp	.+182    	; 0x806 <__fp_zero>
 750:	67 2f       	mov	r22, r23
 752:	78 2f       	mov	r23, r24
 754:	88 27       	eor	r24, r24
 756:	b8 5f       	subi	r27, 0xF8	; 248
 758:	39 f0       	breq	.+14     	; 0x768 <__fixunssfsi+0x46>
 75a:	b9 3f       	cpi	r27, 0xF9	; 249
 75c:	cc f3       	brlt	.-14     	; 0x750 <__fixunssfsi+0x2e>
 75e:	86 95       	lsr	r24
 760:	77 95       	ror	r23
 762:	67 95       	ror	r22
 764:	b3 95       	inc	r27
 766:	d9 f7       	brne	.-10     	; 0x75e <__fixunssfsi+0x3c>
 768:	3e f4       	brtc	.+14     	; 0x778 <__fixunssfsi+0x56>
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__fp_cmp>:
 77a:	99 0f       	add	r25, r25
 77c:	00 08       	sbc	r0, r0
 77e:	55 0f       	add	r21, r21
 780:	aa 0b       	sbc	r26, r26
 782:	e0 e8       	ldi	r30, 0x80	; 128
 784:	fe ef       	ldi	r31, 0xFE	; 254
 786:	16 16       	cp	r1, r22
 788:	17 06       	cpc	r1, r23
 78a:	e8 07       	cpc	r30, r24
 78c:	f9 07       	cpc	r31, r25
 78e:	c0 f0       	brcs	.+48     	; 0x7c0 <__fp_cmp+0x46>
 790:	12 16       	cp	r1, r18
 792:	13 06       	cpc	r1, r19
 794:	e4 07       	cpc	r30, r20
 796:	f5 07       	cpc	r31, r21
 798:	98 f0       	brcs	.+38     	; 0x7c0 <__fp_cmp+0x46>
 79a:	62 1b       	sub	r22, r18
 79c:	73 0b       	sbc	r23, r19
 79e:	84 0b       	sbc	r24, r20
 7a0:	95 0b       	sbc	r25, r21
 7a2:	39 f4       	brne	.+14     	; 0x7b2 <__fp_cmp+0x38>
 7a4:	0a 26       	eor	r0, r26
 7a6:	61 f0       	breq	.+24     	; 0x7c0 <__fp_cmp+0x46>
 7a8:	23 2b       	or	r18, r19
 7aa:	24 2b       	or	r18, r20
 7ac:	25 2b       	or	r18, r21
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <__fp_cmp+0x3e>
 7b0:	08 95       	ret
 7b2:	0a 26       	eor	r0, r26
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__fp_cmp+0x3e>
 7b6:	a1 40       	sbci	r26, 0x01	; 1
 7b8:	a6 95       	lsr	r26
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	81 1d       	adc	r24, r1
 7be:	81 1d       	adc	r24, r1
 7c0:	08 95       	ret

000007c2 <__fp_split3>:
 7c2:	57 fd       	sbrc	r21, 7
 7c4:	90 58       	subi	r25, 0x80	; 128
 7c6:	44 0f       	add	r20, r20
 7c8:	55 1f       	adc	r21, r21
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <__fp_splitA+0x10>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__fp_splitA+0x1a>
 7d0:	47 95       	ror	r20

000007d2 <__fp_splitA>:
 7d2:	88 0f       	add	r24, r24
 7d4:	97 fb       	bst	r25, 7
 7d6:	99 1f       	adc	r25, r25
 7d8:	61 f0       	breq	.+24     	; 0x7f2 <__fp_splitA+0x20>
 7da:	9f 3f       	cpi	r25, 0xFF	; 255
 7dc:	79 f0       	breq	.+30     	; 0x7fc <__fp_splitA+0x2a>
 7de:	87 95       	ror	r24
 7e0:	08 95       	ret
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	55 1f       	adc	r21, r21
 7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <__fp_split3+0xe>
 7ec:	46 95       	lsr	r20
 7ee:	f1 df       	rcall	.-30     	; 0x7d2 <__fp_splitA>
 7f0:	08 c0       	rjmp	.+16     	; 0x802 <__fp_splitA+0x30>
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	f1 cf       	rjmp	.-30     	; 0x7de <__fp_splitA+0xc>
 7fc:	86 95       	lsr	r24
 7fe:	71 05       	cpc	r23, r1
 800:	61 05       	cpc	r22, r1
 802:	08 94       	sec
 804:	08 95       	ret

00000806 <__fp_zero>:
 806:	e8 94       	clt

00000808 <__fp_szero>:
 808:	bb 27       	eor	r27, r27
 80a:	66 27       	eor	r22, r22
 80c:	77 27       	eor	r23, r23
 80e:	cb 01       	movw	r24, r22
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__gesf2>:
 814:	b2 df       	rcall	.-156    	; 0x77a <__fp_cmp>
 816:	08 f4       	brcc	.+2      	; 0x81a <__gesf2+0x6>
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	08 95       	ret

0000081c <__mulsf3>:
 81c:	0b d0       	rcall	.+22     	; 0x834 <__mulsf3x>
 81e:	78 c0       	rjmp	.+240    	; 0x910 <__fp_round>
 820:	69 d0       	rcall	.+210    	; 0x8f4 <__fp_pscA>
 822:	28 f0       	brcs	.+10     	; 0x82e <__mulsf3+0x12>
 824:	6e d0       	rcall	.+220    	; 0x902 <__fp_pscB>
 826:	18 f0       	brcs	.+6      	; 0x82e <__mulsf3+0x12>
 828:	95 23       	and	r25, r21
 82a:	09 f0       	breq	.+2      	; 0x82e <__mulsf3+0x12>
 82c:	5a c0       	rjmp	.+180    	; 0x8e2 <__fp_inf>
 82e:	5f c0       	rjmp	.+190    	; 0x8ee <__fp_nan>
 830:	11 24       	eor	r1, r1
 832:	ea cf       	rjmp	.-44     	; 0x808 <__fp_szero>

00000834 <__mulsf3x>:
 834:	c6 df       	rcall	.-116    	; 0x7c2 <__fp_split3>
 836:	a0 f3       	brcs	.-24     	; 0x820 <__mulsf3+0x4>

00000838 <__mulsf3_pse>:
 838:	95 9f       	mul	r25, r21
 83a:	d1 f3       	breq	.-12     	; 0x830 <__mulsf3+0x14>
 83c:	95 0f       	add	r25, r21
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	55 1f       	adc	r21, r21
 842:	62 9f       	mul	r22, r18
 844:	f0 01       	movw	r30, r0
 846:	72 9f       	mul	r23, r18
 848:	bb 27       	eor	r27, r27
 84a:	f0 0d       	add	r31, r0
 84c:	b1 1d       	adc	r27, r1
 84e:	63 9f       	mul	r22, r19
 850:	aa 27       	eor	r26, r26
 852:	f0 0d       	add	r31, r0
 854:	b1 1d       	adc	r27, r1
 856:	aa 1f       	adc	r26, r26
 858:	64 9f       	mul	r22, r20
 85a:	66 27       	eor	r22, r22
 85c:	b0 0d       	add	r27, r0
 85e:	a1 1d       	adc	r26, r1
 860:	66 1f       	adc	r22, r22
 862:	82 9f       	mul	r24, r18
 864:	22 27       	eor	r18, r18
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	62 1f       	adc	r22, r18
 86c:	73 9f       	mul	r23, r19
 86e:	b0 0d       	add	r27, r0
 870:	a1 1d       	adc	r26, r1
 872:	62 1f       	adc	r22, r18
 874:	83 9f       	mul	r24, r19
 876:	a0 0d       	add	r26, r0
 878:	61 1d       	adc	r22, r1
 87a:	22 1f       	adc	r18, r18
 87c:	74 9f       	mul	r23, r20
 87e:	33 27       	eor	r19, r19
 880:	a0 0d       	add	r26, r0
 882:	61 1d       	adc	r22, r1
 884:	23 1f       	adc	r18, r19
 886:	84 9f       	mul	r24, r20
 888:	60 0d       	add	r22, r0
 88a:	21 1d       	adc	r18, r1
 88c:	82 2f       	mov	r24, r18
 88e:	76 2f       	mov	r23, r22
 890:	6a 2f       	mov	r22, r26
 892:	11 24       	eor	r1, r1
 894:	9f 57       	subi	r25, 0x7F	; 127
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	8a f0       	brmi	.+34     	; 0x8bc <__mulsf3_pse+0x84>
 89a:	e1 f0       	breq	.+56     	; 0x8d4 <__mulsf3_pse+0x9c>
 89c:	88 23       	and	r24, r24
 89e:	4a f0       	brmi	.+18     	; 0x8b2 <__mulsf3_pse+0x7a>
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	bb 1f       	adc	r27, r27
 8a6:	66 1f       	adc	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	88 1f       	adc	r24, r24
 8ac:	91 50       	subi	r25, 0x01	; 1
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__mulsf3_pse+0x64>
 8b2:	9e 3f       	cpi	r25, 0xFE	; 254
 8b4:	51 05       	cpc	r21, r1
 8b6:	70 f0       	brcs	.+28     	; 0x8d4 <__mulsf3_pse+0x9c>
 8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <__fp_inf>
 8ba:	a6 cf       	rjmp	.-180    	; 0x808 <__fp_szero>
 8bc:	5f 3f       	cpi	r21, 0xFF	; 255
 8be:	ec f3       	brlt	.-6      	; 0x8ba <__mulsf3_pse+0x82>
 8c0:	98 3e       	cpi	r25, 0xE8	; 232
 8c2:	dc f3       	brlt	.-10     	; 0x8ba <__mulsf3_pse+0x82>
 8c4:	86 95       	lsr	r24
 8c6:	77 95       	ror	r23
 8c8:	67 95       	ror	r22
 8ca:	b7 95       	ror	r27
 8cc:	f7 95       	ror	r31
 8ce:	e7 95       	ror	r30
 8d0:	9f 5f       	subi	r25, 0xFF	; 255
 8d2:	c1 f7       	brne	.-16     	; 0x8c4 <__mulsf3_pse+0x8c>
 8d4:	fe 2b       	or	r31, r30
 8d6:	88 0f       	add	r24, r24
 8d8:	91 1d       	adc	r25, r1
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	97 f9       	bld	r25, 7
 8e0:	08 95       	ret

000008e2 <__fp_inf>:
 8e2:	97 f9       	bld	r25, 7
 8e4:	9f 67       	ori	r25, 0x7F	; 127
 8e6:	80 e8       	ldi	r24, 0x80	; 128
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	08 95       	ret

000008ee <__fp_nan>:
 8ee:	9f ef       	ldi	r25, 0xFF	; 255
 8f0:	80 ec       	ldi	r24, 0xC0	; 192
 8f2:	08 95       	ret

000008f4 <__fp_pscA>:
 8f4:	00 24       	eor	r0, r0
 8f6:	0a 94       	dec	r0
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	18 06       	cpc	r1, r24
 8fe:	09 06       	cpc	r0, r25
 900:	08 95       	ret

00000902 <__fp_pscB>:
 902:	00 24       	eor	r0, r0
 904:	0a 94       	dec	r0
 906:	12 16       	cp	r1, r18
 908:	13 06       	cpc	r1, r19
 90a:	14 06       	cpc	r1, r20
 90c:	05 06       	cpc	r0, r21
 90e:	08 95       	ret

00000910 <__fp_round>:
 910:	09 2e       	mov	r0, r25
 912:	03 94       	inc	r0
 914:	00 0c       	add	r0, r0
 916:	11 f4       	brne	.+4      	; 0x91c <__fp_round+0xc>
 918:	88 23       	and	r24, r24
 91a:	52 f0       	brmi	.+20     	; 0x930 <__fp_round+0x20>
 91c:	bb 0f       	add	r27, r27
 91e:	40 f4       	brcc	.+16     	; 0x930 <__fp_round+0x20>
 920:	bf 2b       	or	r27, r31
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0x18>
 924:	60 ff       	sbrs	r22, 0
 926:	04 c0       	rjmp	.+8      	; 0x930 <__fp_round+0x20>
 928:	6f 5f       	subi	r22, 0xFF	; 255
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	08 95       	ret

00000932 <eeprom_read_byte>:
 932:	f9 99       	sbic	0x1f, 1	; 31
 934:	fe cf       	rjmp	.-4      	; 0x932 <eeprom_read_byte>
 936:	92 bd       	out	0x22, r25	; 34
 938:	81 bd       	out	0x21, r24	; 33
 93a:	f8 9a       	sbi	0x1f, 0	; 31
 93c:	99 27       	eor	r25, r25
 93e:	80 b5       	in	r24, 0x20	; 32
 940:	08 95       	ret

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
