
Winder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000008b2  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800208  00800208  0000094e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0f  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c82  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a5  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000034a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e2 c2       	rjmp	.+1476   	; 0x62a <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	40 d0       	rcall	.+128    	; 0x1a0 <main>
 120:	c6 c3       	rjmp	.+1932   	; 0x8ae <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z19USART_send_hardwareh>:
}


/************************* Transmiterea unui byte UART_hardware *************************/
void USART_send_hardware(unsigned char data)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0)));
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	88 2f       	mov	r24, r24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 72       	andi	r24, 0x20	; 32
 13e:	99 27       	eor	r25, r25
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	89 2b       	or	r24, r25
 144:	09 f0       	breq	.+2      	; 0x148 <_Z19USART_send_hardwareh+0x24>
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	22 23       	and	r18, r18
 14a:	09 f0       	breq	.+2      	; 0x14e <_Z19USART_send_hardwareh+0x2a>
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <_Z19USART_send_hardwareh+0xc>
	UDR0 = data;
 14e:	86 ec       	ldi	r24, 0xC6	; 198
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
}
 158:	00 00       	nop
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_Z24USART_putstring_hardwarePc>:


/************************* Transmiterea unui sir de caractere UART_hardware *************************/
void USART_putstring_hardware(char* StringPtr)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	1f 92       	push	r1
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
	while(*StringPtr != 0x00)
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	59 f0       	breq	.+22     	; 0x194 <_Z24USART_putstring_hardwarePc+0x32>
	{
		USART_send_hardware(*StringPtr);
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	9a 81       	ldd	r25, Y+2	; 0x02
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	ce df       	rcall	.-100    	; 0x124 <_Z19USART_send_hardwareh>
		StringPtr++;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	9a 83       	std	Y+2, r25	; 0x02
 190:	89 83       	std	Y+1, r24	; 0x01


/************************* Transmiterea unui sir de caractere UART_hardware *************************/
void USART_putstring_hardware(char* StringPtr)
{
	while(*StringPtr != 0x00)
 192:	ef cf       	rjmp	.-34     	; 0x172 <_Z24USART_putstring_hardwarePc+0x10>
	{
		USART_send_hardware(*StringPtr);
		StringPtr++;
	}
}
 194:	00 00       	nop
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <main>:

int main(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	2e 97       	sbiw	r28, 0x0e	; 14
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	// Input/Output Ports initialization
	// Port A initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
 1b4:	81 e2       	ldi	r24, 0x21	; 33
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTA=(0<<PA7) | (0<<PA6) | (0<<PA5) | (0<<PA4) | (0<<PA3) | (0<<PA2) | (0<<PA1) | (0<<PA0);
 1bc:	82 e2       	ldi	r24, 0x22	; 34
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	10 82       	st	Z, r1

	// Port B initialization
	// Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	20 e8       	ldi	r18, 0x80	; 128
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTB=(0<<PB7) | (0<<PB6) | (0<<PB5) | (0<<PB4) | (0<<PB3) | (0<<PB2) | (0<<PB1) | (0<<PB0);
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	10 82       	st	Z, r1

	// Port C initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 1d6:	87 e2       	ldi	r24, 0x27	; 39
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PC7) | (0<<PC6) | (0<<PC5) | (0<<PC4) | (0<<PC3) | (0<<PC2) | (0<<PC1) | (0<<PC0);
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	10 82       	st	Z, r1

	// Port D initialization
	// Function: Bit7=Out Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 1e6:	8a e2       	ldi	r24, 0x2A	; 42
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	20 e8       	ldi	r18, 0x80	; 128
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PD7) | (0<<PD6) | (0<<PD5) | (0<<PD4) | (0<<PD3) | (0<<PD2) | (0<<PD1) | (0<<PD0);
 1f0:	8b e2       	ldi	r24, 0x2B	; 43
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	10 82       	st	Z, r1

	// Port E initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In
	DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (1<<DDE1) | (0<<DDE0);
 1f8:	8d e2       	ldi	r24, 0x2D	; 45
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	22 e0       	ldi	r18, 0x02	; 2
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T
	PORTE=(0<<PE7) | (0<<PE6) | (0<<PE5) | (0<<PE4) | (0<<PE3) | (0<<PE2) | (0<<PE1) | (0<<PE0);
 202:	8e e2       	ldi	r24, 0x2E	; 46
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	10 82       	st	Z, r1

	// Port F initialization
	// Function: Bit7=Out Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
	DDRF=(1<<DDF7) | (1<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (1<<DDF2) | (1<<DDF1) | (1<<DDF0);
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	27 ec       	ldi	r18, 0xC7	; 199
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
	// State: Bit7=0 Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
	PORTF=(0<<PF7) | (0<<PF6) | (0<<PF5) | (0<<PF4) | (0<<PF3) | (0<<PF2) | (0<<PF1) | (0<<PF0);
 214:	81 e3       	ldi	r24, 0x31	; 49
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	10 82       	st	Z, r1

	// Port G initialization
	// Function: Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRG=(0<<DDG5) | (0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	10 82       	st	Z, r1
	// State: Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTG=(0<<PG5) | (0<<PG4) | (0<<PG3) | (0<<PG2) | (0<<PG1) | (0<<PG0);
 224:	84 e3       	ldi	r24, 0x34	; 52
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	10 82       	st	Z, r1

	// Port H initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRH=(0<<DDH7) | (0<<DDH6) | (0<<DDH5) | (0<<DDH4) | (0<<DDH3) | (0<<DDH2) | (0<<DDH1) | (0<<DDH0);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	fc 01       	movw	r30, r24
 232:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTH=(0<<PH7) | (0<<PH6) | (0<<PH5) | (0<<PH4) | (0<<PH3) | (0<<PH2) | (0<<PH1) | (0<<PH0);
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	fc 01       	movw	r30, r24
 23a:	10 82       	st	Z, r1

	// Port J initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRJ=(0<<DDJ7) | (0<<DDJ6) | (0<<DDJ5) | (0<<DDJ4) | (0<<DDJ3) | (0<<DDJ2) | (0<<DDJ1) | (0<<DDJ0);
 23c:	84 e0       	ldi	r24, 0x04	; 4
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	fc 01       	movw	r30, r24
 242:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTJ=(0<<PJ7) | (0<<PJ6) | (0<<PJ5) | (0<<PJ4) | (0<<PJ3) | (0<<PJ2) | (0<<PJ1) | (0<<PJ0);
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	fc 01       	movw	r30, r24
 24a:	10 82       	st	Z, r1

	// Port K initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRK=(0<<DDK7) | (0<<DDK6) | (0<<DDK5) | (0<<DDK4) | (0<<DDK3) | (0<<DDK2) | (0<<DDK1) | (0<<DDK0);
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	fc 01       	movw	r30, r24
 252:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTK=(0<<PK7) | (0<<PK6) | (0<<PK5) | (0<<PK4) | (0<<PK3) | (0<<PK2) | (0<<PK1) | (0<<PK0);
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	fc 01       	movw	r30, r24
 25a:	10 82       	st	Z, r1

	// Port L initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRL=(0<<DDL7) | (0<<DDL6) | (0<<DDL5) | (0<<DDL4) | (0<<DDL3) | (0<<DDL2) | (0<<DDL1) | (0<<DDL0);
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	fc 01       	movw	r30, r24
 262:	10 82       	st	Z, r1
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTL=(0<<PL7) | (0<<PL6) | (0<<PL5) | (0<<PL4) | (0<<PL3) | (0<<PL2) | (0<<PL1) | (0<<PL0);
 264:	8b e0       	ldi	r24, 0x0B	; 11
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	fc 01       	movw	r30, r24
 26a:	10 82       	st	Z, r1
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 26c:	84 e4       	ldi	r24, 0x44	; 68
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	10 82       	st	Z, r1
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 274:	85 e4       	ldi	r24, 0x45	; 69
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	10 82       	st	Z, r1
	TCNT0=0x00;
 27c:	86 e4       	ldi	r24, 0x46	; 70
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
	OCR0A=0x00;
 284:	87 e4       	ldi	r24, 0x47	; 71
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
	OCR0B=0x00;
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	fc 01       	movw	r30, r24
 292:	10 82       	st	Z, r1
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	10 82       	st	Z, r1
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 29c:	81 e8       	ldi	r24, 0x81	; 129
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	10 82       	st	Z, r1
	TCNT1H=0x00;
 2a4:	85 e8       	ldi	r24, 0x85	; 133
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	10 82       	st	Z, r1
	TCNT1L=0x00;
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	10 82       	st	Z, r1
	ICR1H=0x00;
 2b4:	87 e8       	ldi	r24, 0x87	; 135
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	10 82       	st	Z, r1
	ICR1L=0x00;
 2bc:	86 e8       	ldi	r24, 0x86	; 134
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	fc 01       	movw	r30, r24
 2c2:	10 82       	st	Z, r1
	OCR1AH=0x00;
 2c4:	89 e8       	ldi	r24, 0x89	; 137
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	10 82       	st	Z, r1
	OCR1AL=0x00;
 2cc:	88 e8       	ldi	r24, 0x88	; 136
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	10 82       	st	Z, r1
	OCR1BH=0x00;
 2d4:	8b e8       	ldi	r24, 0x8B	; 139
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	10 82       	st	Z, r1
	OCR1BL=0x00;
 2dc:	8a e8       	ldi	r24, 0x8A	; 138
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	fc 01       	movw	r30, r24
 2e2:	10 82       	st	Z, r1
	OCR1CH=0x00;
 2e4:	8d e8       	ldi	r24, 0x8D	; 141
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	10 82       	st	Z, r1
	OCR1CL=0x00;
 2ec:	8c e8       	ldi	r24, 0x8C	; 140
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	10 82       	st	Z, r1
	// Clock source: System Clock
	// Clock value: Timer2 Stopped
	// Mode: Normal top=0xFF
	// OC2A output: Disconnected
	// OC2B output: Disconnected
	ASSR=(0<<EXCLK) | (0<<AS2);
 2f4:	86 eb       	ldi	r24, 0xB6	; 182
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	10 82       	st	Z, r1
	TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
 2fc:	80 eb       	ldi	r24, 0xB0	; 176
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	10 82       	st	Z, r1
	TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 304:	81 eb       	ldi	r24, 0xB1	; 177
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	10 82       	st	Z, r1
	TCNT2=0x00;
 30c:	82 eb       	ldi	r24, 0xB2	; 178
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	10 82       	st	Z, r1
	OCR2A=0x00;
 314:	83 eb       	ldi	r24, 0xB3	; 179
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	10 82       	st	Z, r1
	OCR2B=0x00;
 31c:	84 eb       	ldi	r24, 0xB4	; 180
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	10 82       	st	Z, r1
	// Timer3 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
 324:	80 e9       	ldi	r24, 0x90	; 144
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	10 82       	st	Z, r1
	TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
 32c:	81 e9       	ldi	r24, 0x91	; 145
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	10 82       	st	Z, r1
	TCNT3H=0x00;
 334:	85 e9       	ldi	r24, 0x95	; 149
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	10 82       	st	Z, r1
	TCNT3L=0x00;
 33c:	84 e9       	ldi	r24, 0x94	; 148
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	10 82       	st	Z, r1
	ICR3H=0x00;
 344:	87 e9       	ldi	r24, 0x97	; 151
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	10 82       	st	Z, r1
	ICR3L=0x00;
 34c:	86 e9       	ldi	r24, 0x96	; 150
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	fc 01       	movw	r30, r24
 352:	10 82       	st	Z, r1
	OCR3AH=0x00;
 354:	89 e9       	ldi	r24, 0x99	; 153
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	10 82       	st	Z, r1
	OCR3AL=0x00;
 35c:	88 e9       	ldi	r24, 0x98	; 152
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	10 82       	st	Z, r1
	OCR3BH=0x00;
 364:	8b e9       	ldi	r24, 0x9B	; 155
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	10 82       	st	Z, r1
	OCR3BL=0x00;
 36c:	8a e9       	ldi	r24, 0x9A	; 154
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	10 82       	st	Z, r1
	OCR3CH=0x00;
 374:	8d e9       	ldi	r24, 0x9D	; 157
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	10 82       	st	Z, r1
	OCR3CL=0x00;
 37c:	8c e9       	ldi	r24, 0x9C	; 156
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	10 82       	st	Z, r1
	// Timer4 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR4A=(0<<COM4A1) | (0<<COM4A0) | (0<<COM4B1) | (0<<COM4B0) | (0<<COM4C1) | (0<<COM4C0) | (0<<WGM41) | (0<<WGM40);
 384:	80 ea       	ldi	r24, 0xA0	; 160
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	fc 01       	movw	r30, r24
 38a:	10 82       	st	Z, r1
	TCCR4B=(0<<ICNC4) | (0<<ICES4) | (0<<WGM43) | (0<<WGM42) | (0<<CS42) | (0<<CS41) | (0<<CS40);
 38c:	81 ea       	ldi	r24, 0xA1	; 161
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	10 82       	st	Z, r1
	TCNT4H=0x00;
 394:	85 ea       	ldi	r24, 0xA5	; 165
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	10 82       	st	Z, r1
	TCNT4L=0x00;
 39c:	84 ea       	ldi	r24, 0xA4	; 164
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	10 82       	st	Z, r1
	ICR4H=0x00;
 3a4:	87 ea       	ldi	r24, 0xA7	; 167
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	10 82       	st	Z, r1
	ICR4L=0x00;
 3ac:	86 ea       	ldi	r24, 0xA6	; 166
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	10 82       	st	Z, r1
	OCR4AH=0x00;
 3b4:	89 ea       	ldi	r24, 0xA9	; 169
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	10 82       	st	Z, r1
	OCR4AL=0x00;
 3bc:	88 ea       	ldi	r24, 0xA8	; 168
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	10 82       	st	Z, r1
	OCR4BH=0x00;
 3c4:	8b ea       	ldi	r24, 0xAB	; 171
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	10 82       	st	Z, r1
	OCR4BL=0x00;
 3cc:	8a ea       	ldi	r24, 0xAA	; 170
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	10 82       	st	Z, r1
	OCR4CH=0x00;
 3d4:	8d ea       	ldi	r24, 0xAD	; 173
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	fc 01       	movw	r30, r24
 3da:	10 82       	st	Z, r1
	OCR4CL=0x00;
 3dc:	8c ea       	ldi	r24, 0xAC	; 172
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	10 82       	st	Z, r1
	// Timer5 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR5A=(0<<COM5A1) | (0<<COM5A0) | (0<<COM5B1) | (0<<COM5B0) | (0<<COM5C1) | (0<<COM5C0) | (0<<WGM51) | (0<<WGM50);
 3e4:	80 e2       	ldi	r24, 0x20	; 32
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	fc 01       	movw	r30, r24
 3ea:	10 82       	st	Z, r1
	TCCR5B=(0<<ICNC5) | (0<<ICES5) | (0<<WGM53) | (0<<WGM52) | (0<<CS52) | (0<<CS51) | (0<<CS50);
 3ec:	81 e2       	ldi	r24, 0x21	; 33
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	fc 01       	movw	r30, r24
 3f2:	10 82       	st	Z, r1
	TCNT5H=0x00;
 3f4:	85 e2       	ldi	r24, 0x25	; 37
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	fc 01       	movw	r30, r24
 3fa:	10 82       	st	Z, r1
	TCNT5L=0x00;
 3fc:	84 e2       	ldi	r24, 0x24	; 36
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	fc 01       	movw	r30, r24
 402:	10 82       	st	Z, r1
	ICR5H=0x00;
 404:	87 e2       	ldi	r24, 0x27	; 39
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	fc 01       	movw	r30, r24
 40a:	10 82       	st	Z, r1
	ICR5L=0x00;
 40c:	86 e2       	ldi	r24, 0x26	; 38
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	fc 01       	movw	r30, r24
 412:	10 82       	st	Z, r1
	OCR5AH=0x00;
 414:	89 e2       	ldi	r24, 0x29	; 41
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	fc 01       	movw	r30, r24
 41a:	10 82       	st	Z, r1
	OCR5AL=0x00;
 41c:	88 e2       	ldi	r24, 0x28	; 40
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	fc 01       	movw	r30, r24
 422:	10 82       	st	Z, r1
	OCR5BH=0x00;
 424:	8b e2       	ldi	r24, 0x2B	; 43
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	fc 01       	movw	r30, r24
 42a:	10 82       	st	Z, r1
	OCR5BL=0x00;
 42c:	8a e2       	ldi	r24, 0x2A	; 42
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	fc 01       	movw	r30, r24
 432:	10 82       	st	Z, r1
	OCR5CH=0x00;
 434:	8d e2       	ldi	r24, 0x2D	; 45
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	fc 01       	movw	r30, r24
 43a:	10 82       	st	Z, r1
	OCR5CL=0x00;
 43c:	8c e2       	ldi	r24, 0x2C	; 44
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	fc 01       	movw	r30, r24
 442:	10 82       	st	Z, r1

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 444:	8e e6       	ldi	r24, 0x6E	; 110
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	10 82       	st	Z, r1

	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1C) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
 44c:	8f e6       	ldi	r24, 0x6F	; 111
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	fc 01       	movw	r30, r24
 452:	10 82       	st	Z, r1

	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 454:	80 e7       	ldi	r24, 0x70	; 112
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	10 82       	st	Z, r1

	// Timer/Counter 3 Interrupt(s) initialization
	TIMSK3=(0<<ICIE3) | (0<<OCIE3C) | (0<<OCIE3B) | (0<<OCIE3A) | (0<<TOIE3);
 45c:	81 e7       	ldi	r24, 0x71	; 113
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	10 82       	st	Z, r1

	// Timer/Counter 4 Interrupt(s) initialization
	TIMSK4=(0<<ICIE4) | (0<<OCIE4C) | (0<<OCIE4B) | (0<<OCIE4A) | (0<<TOIE4);
 464:	82 e7       	ldi	r24, 0x72	; 114
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	10 82       	st	Z, r1

	// Timer/Counter 5 Interrupt(s) initialization
	TIMSK5=(0<<ICIE5) | (0<<OCIE5C) | (0<<OCIE5B) | (0<<OCIE5A) | (0<<TOIE5);
 46c:	83 e7       	ldi	r24, 0x73	; 115
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	10 82       	st	Z, r1
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: Off
	// INT7: Off
	EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 474:	89 e6       	ldi	r24, 0x69	; 105
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	fc 01       	movw	r30, r24
 47a:	10 82       	st	Z, r1
	EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
 47c:	8a e6       	ldi	r24, 0x6A	; 106
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	10 82       	st	Z, r1
	EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
 484:	8d e3       	ldi	r24, 0x3D	; 61
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	10 82       	st	Z, r1
	// PCINT19 interrupt: Off
	// PCINT20 interrupt: Off
	// PCINT21 interrupt: Off
	// PCINT22 interrupt: Off
	// PCINT23 interrupt: Off
	PCMSK0=(0<<PCINT7) | (0<<PCINT6) | (0<<PCINT5) | (0<<PCINT4) | (0<<PCINT3) | (0<<PCINT2) | (0<<PCINT1) | (0<<PCINT0);
 48c:	8b e6       	ldi	r24, 0x6B	; 107
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1
	PCMSK1=(0<<PCINT15) | (0<<PCINT14) | (0<<PCINT13) | (0<<PCINT12) | (0<<PCINT11) | (0<<PCINT10) | (0<<PCINT9) | (0<<PCINT8);
 494:	8c e6       	ldi	r24, 0x6C	; 108
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	fc 01       	movw	r30, r24
 49a:	10 82       	st	Z, r1
	PCMSK2=(0<<PCINT23) | (0<<PCINT22) | (0<<PCINT21) | (0<<PCINT20) | (0<<PCINT19) | (0<<PCINT18) | (0<<PCINT17) | (0<<PCINT16);
 49c:	8d e6       	ldi	r24, 0x6D	; 109
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	10 82       	st	Z, r1
	PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 4a4:	88 e6       	ldi	r24, 0x68	; 104
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	fc 01       	movw	r30, r24
 4aa:	10 82       	st	Z, r1
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
 4ac:	80 ec       	ldi	r24, 0xC0	; 192
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	10 82       	st	Z, r1
	UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 4b4:	81 ec       	ldi	r24, 0xC1	; 193
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	28 e9       	ldi	r18, 0x98	; 152
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
	UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
 4be:	82 ec       	ldi	r24, 0xC2	; 194
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	26 e0       	ldi	r18, 0x06	; 6
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
	UBRR0H=0x00;
 4c8:	85 ec       	ldi	r24, 0xC5	; 197
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	10 82       	st	Z, r1
	UBRR0L=0x67;
 4d0:	84 ec       	ldi	r24, 0xC4	; 196
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	27 e6       	ldi	r18, 0x67	; 103
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18

	// USART1 initialization
	// USART1 disabled
	UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
 4da:	89 ec       	ldi	r24, 0xC9	; 201
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	10 82       	st	Z, r1

	// USART2 initialization
	// USART2 disabled
	UCSR2B=(0<<RXCIE2) | (0<<TXCIE2) | (0<<UDRIE2) | (0<<RXEN2) | (0<<TXEN2) | (0<<UCSZ22) | (0<<RXB82) | (0<<TXB82);
 4e2:	81 ed       	ldi	r24, 0xD1	; 209
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	10 82       	st	Z, r1

	// USART3 initialization
	// USART3 disabled
	UCSR3B=(0<<RXCIE3) | (0<<TXCIE3) | (0<<UDRIE3) | (0<<RXEN3) | (0<<TXEN3) | (0<<UCSZ32) | (0<<RXB83) | (0<<TXB83);
 4ea:	81 e3       	ldi	r24, 0x31	; 49
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	fc 01       	movw	r30, r24
 4f0:	10 82       	st	Z, r1
	// Analog Comparator: Off
	// The Analog Comparator's positive input is
	// connected to the AIN0 pin
	// The Analog Comparator's negative input is
	// connected to the AIN1 pin
	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
 4f2:	80 e5       	ldi	r24, 0x50	; 80
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	20 e8       	ldi	r18, 0x80	; 128
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
	ADCSRB=(0<<ACME);
 4fc:	8b e7       	ldi	r24, 0x7B	; 123
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	10 82       	st	Z, r1
	// Digital input buffer on AIN0: On
	// Digital input buffer on AIN1: On
	DIDR1=(0<<AIN0D) | (0<<AIN1D);
 504:	8f e7       	ldi	r24, 0x7F	; 127
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	10 82       	st	Z, r1

	// ADC initialization
	// ADC disabled
	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 50c:	8a e7       	ldi	r24, 0x7A	; 122
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	10 82       	st	Z, r1

	// SPI initialization
	// SPI disabled
	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 514:	8c e4       	ldi	r24, 0x4C	; 76
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc 01       	movw	r30, r24
 51a:	10 82       	st	Z, r1

	// TWI initialization
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
 51c:	8c eb       	ldi	r24, 0xBC	; 188
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	fc 01       	movw	r30, r24
 522:	10 82       	st	Z, r1
	
	sei();
 524:	78 94       	sei
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	aa e7       	ldi	r26, 0x7A	; 122
 52c:	b4 e4       	ldi	r27, 0x44	; 68
 52e:	89 83       	std	Y+1, r24	; 0x01
 530:	9a 83       	std	Y+2, r25	; 0x02
 532:	ab 83       	std	Y+3, r26	; 0x03
 534:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	4a e7       	ldi	r20, 0x7A	; 122
 53c:	55 e4       	ldi	r21, 0x45	; 69
 53e:	69 81       	ldd	r22, Y+1	; 0x01
 540:	7a 81       	ldd	r23, Y+2	; 0x02
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	9c 81       	ldd	r25, Y+4	; 0x04
 546:	28 d1       	rcall	.+592    	; 0x798 <__mulsf3>
 548:	dc 01       	movw	r26, r24
 54a:	cb 01       	movw	r24, r22
 54c:	8d 83       	std	Y+5, r24	; 0x05
 54e:	9e 83       	std	Y+6, r25	; 0x06
 550:	af 83       	std	Y+7, r26	; 0x07
 552:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 e8       	ldi	r20, 0x80	; 128
 55a:	5f e3       	ldi	r21, 0x3F	; 63
 55c:	6d 81       	ldd	r22, Y+5	; 0x05
 55e:	7e 81       	ldd	r23, Y+6	; 0x06
 560:	8f 81       	ldd	r24, Y+7	; 0x07
 562:	98 85       	ldd	r25, Y+8	; 0x08
 564:	98 d0       	rcall	.+304    	; 0x696 <__cmpsf2>
 566:	88 23       	and	r24, r24
 568:	2c f4       	brge	.+10     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		__ticks = 1;
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	9a 87       	std	Y+10, r25	; 0x0a
 570:	89 87       	std	Y+9, r24	; 0x09
 572:	3a c0       	rjmp	.+116    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
	else if (__tmp > 65535)
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	3f ef       	ldi	r19, 0xFF	; 255
 578:	4f e7       	ldi	r20, 0x7F	; 127
 57a:	57 e4       	ldi	r21, 0x47	; 71
 57c:	6d 81       	ldd	r22, Y+5	; 0x05
 57e:	7e 81       	ldd	r23, Y+6	; 0x06
 580:	8f 81       	ldd	r24, Y+7	; 0x07
 582:	98 85       	ldd	r25, Y+8	; 0x08
 584:	05 d1       	rcall	.+522    	; 0x790 <__gesf2>
 586:	18 16       	cp	r1, r24
 588:	34 f5       	brge	.+76     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	40 e2       	ldi	r20, 0x20	; 32
 590:	51 e4       	ldi	r21, 0x41	; 65
 592:	69 81       	ldd	r22, Y+1	; 0x01
 594:	7a 81       	ldd	r23, Y+2	; 0x02
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	9c 81       	ldd	r25, Y+4	; 0x04
 59a:	fe d0       	rcall	.+508    	; 0x798 <__mulsf3>
 59c:	dc 01       	movw	r26, r24
 59e:	cb 01       	movw	r24, r22
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	7c d0       	rcall	.+248    	; 0x69e <__fixunssfsi>
 5a6:	dc 01       	movw	r26, r24
 5a8:	cb 01       	movw	r24, r22
 5aa:	9a 87       	std	Y+10, r25	; 0x0a
 5ac:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
 5ae:	89 85       	ldd	r24, Y+9	; 0x09
 5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 5b2:	89 2b       	or	r24, r25
 5b4:	19 f1       	breq	.+70     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5b6:	80 e9       	ldi	r24, 0x90	; 144
 5b8:	91 e0       	ldi	r25, 0x01	; 1
 5ba:	9c 87       	std	Y+12, r25	; 0x0c
 5bc:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 5be:	8b 85       	ldd	r24, Y+11	; 0x0b
 5c0:	9c 85       	ldd	r25, Y+12	; 0x0c
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c6:	9c 87       	std	Y+12, r25	; 0x0c
 5c8:	8b 87       	std	Y+11, r24	; 0x0b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ca:	89 85       	ldd	r24, Y+9	; 0x09
 5cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	9a 87       	std	Y+10, r25	; 0x0a
 5d2:	89 87       	std	Y+9, r24	; 0x09
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5d4:	ec cf       	rjmp	.-40     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 5d6:	6d 81       	ldd	r22, Y+5	; 0x05
 5d8:	7e 81       	ldd	r23, Y+6	; 0x06
 5da:	8f 81       	ldd	r24, Y+7	; 0x07
 5dc:	98 85       	ldd	r25, Y+8	; 0x08
 5de:	5f d0       	rcall	.+190    	; 0x69e <__fixunssfsi>
 5e0:	dc 01       	movw	r26, r24
 5e2:	cb 01       	movw	r24, r22
 5e4:	9a 87       	std	Y+10, r25	; 0x0a
 5e6:	89 87       	std	Y+9, r24	; 0x09
 5e8:	89 85       	ldd	r24, Y+9	; 0x09
 5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ec:	9e 87       	std	Y+14, r25	; 0x0e
 5ee:	8d 87       	std	Y+13, r24	; 0x0d
 5f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 5f2:	9e 85       	ldd	r25, Y+14	; 0x0e
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5f8:	9e 87       	std	Y+14, r25	; 0x0e
 5fa:	8d 87       	std	Y+13, r24	; 0x0d
	
    while (1) 
		{
			_delay_ms(1000);
			sprintf(Transmite_buf, "Hello\n");
 5fc:	87 e0       	ldi	r24, 0x07	; 7
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	f2 e0       	ldi	r31, 0x02	; 2
 602:	a8 e0       	ldi	r26, 0x08	; 8
 604:	b2 e0       	ldi	r27, 0x02	; 2
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	8a 95       	dec	r24
			USART_putstring_hardware(Transmite_buf);
 60c:	e1 f7       	brne	.-8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 60e:	88 e0       	ldi	r24, 0x08	; 8
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	a7 dd       	rcall	.-1202   	; 0x162 <_Z24USART_putstring_hardwarePc>
			PORTB^=(1<<PB7);
 614:	85 e2       	ldi	r24, 0x25	; 37
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	25 e2       	ldi	r18, 0x25	; 37
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	f9 01       	movw	r30, r18
 61e:	30 81       	ld	r19, Z
 620:	20 e8       	ldi	r18, 0x80	; 128
 622:	23 27       	eor	r18, r19
 624:	fc 01       	movw	r30, r24
 626:	20 83       	st	Z, r18
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
	
	sei();
	
    while (1) 
 628:	7e cf       	rjmp	.-260    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>

0000062a <__vector_25>:
			PORTB^=(1<<PB7);
		}
}

ISR(USART0_RX_vect)
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 63a:	0f 92       	push	r0
 63c:	2f 93       	push	r18
 63e:	3f 93       	push	r19
 640:	4f 93       	push	r20
 642:	5f 93       	push	r21
 644:	6f 93       	push	r22
 646:	7f 93       	push	r23
 648:	8f 93       	push	r24
 64a:	9f 93       	push	r25
 64c:	af 93       	push	r26
 64e:	bf 93       	push	r27
 650:	ef 93       	push	r30
 652:	ff 93       	push	r31
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
USART_send_hardware(UDR0);
 65c:	86 ec       	ldi	r24, 0xC6	; 198
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	fc 01       	movw	r30, r24
 662:	80 81       	ld	r24, Z
 664:	5f dd       	rcall	.-1346   	; 0x124 <_Z19USART_send_hardwareh>
 666:	00 00       	nop
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 68a:	0f 90       	pop	r0
 68c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__cmpsf2>:
 696:	2f d0       	rcall	.+94     	; 0x6f6 <__fp_cmp>
 698:	08 f4       	brcc	.+2      	; 0x69c <__cmpsf2+0x6>
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	08 95       	ret

0000069e <__fixunssfsi>:
 69e:	57 d0       	rcall	.+174    	; 0x74e <__fp_splitA>
 6a0:	88 f0       	brcs	.+34     	; 0x6c4 <__fixunssfsi+0x26>
 6a2:	9f 57       	subi	r25, 0x7F	; 127
 6a4:	90 f0       	brcs	.+36     	; 0x6ca <__fixunssfsi+0x2c>
 6a6:	b9 2f       	mov	r27, r25
 6a8:	99 27       	eor	r25, r25
 6aa:	b7 51       	subi	r27, 0x17	; 23
 6ac:	a0 f0       	brcs	.+40     	; 0x6d6 <__fixunssfsi+0x38>
 6ae:	d1 f0       	breq	.+52     	; 0x6e4 <__fixunssfsi+0x46>
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	1a f0       	brmi	.+6      	; 0x6c0 <__fixunssfsi+0x22>
 6ba:	ba 95       	dec	r27
 6bc:	c9 f7       	brne	.-14     	; 0x6b0 <__fixunssfsi+0x12>
 6be:	12 c0       	rjmp	.+36     	; 0x6e4 <__fixunssfsi+0x46>
 6c0:	b1 30       	cpi	r27, 0x01	; 1
 6c2:	81 f0       	breq	.+32     	; 0x6e4 <__fixunssfsi+0x46>
 6c4:	5e d0       	rcall	.+188    	; 0x782 <__fp_zero>
 6c6:	b1 e0       	ldi	r27, 0x01	; 1
 6c8:	08 95       	ret
 6ca:	5b c0       	rjmp	.+182    	; 0x782 <__fp_zero>
 6cc:	67 2f       	mov	r22, r23
 6ce:	78 2f       	mov	r23, r24
 6d0:	88 27       	eor	r24, r24
 6d2:	b8 5f       	subi	r27, 0xF8	; 248
 6d4:	39 f0       	breq	.+14     	; 0x6e4 <__fixunssfsi+0x46>
 6d6:	b9 3f       	cpi	r27, 0xF9	; 249
 6d8:	cc f3       	brlt	.-14     	; 0x6cc <__fixunssfsi+0x2e>
 6da:	86 95       	lsr	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b3 95       	inc	r27
 6e2:	d9 f7       	brne	.-10     	; 0x6da <__fixunssfsi+0x3c>
 6e4:	3e f4       	brtc	.+14     	; 0x6f4 <__fixunssfsi+0x56>
 6e6:	90 95       	com	r25
 6e8:	80 95       	com	r24
 6ea:	70 95       	com	r23
 6ec:	61 95       	neg	r22
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__fp_cmp>:
 6f6:	99 0f       	add	r25, r25
 6f8:	00 08       	sbc	r0, r0
 6fa:	55 0f       	add	r21, r21
 6fc:	aa 0b       	sbc	r26, r26
 6fe:	e0 e8       	ldi	r30, 0x80	; 128
 700:	fe ef       	ldi	r31, 0xFE	; 254
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	e8 07       	cpc	r30, r24
 708:	f9 07       	cpc	r31, r25
 70a:	c0 f0       	brcs	.+48     	; 0x73c <__fp_cmp+0x46>
 70c:	12 16       	cp	r1, r18
 70e:	13 06       	cpc	r1, r19
 710:	e4 07       	cpc	r30, r20
 712:	f5 07       	cpc	r31, r21
 714:	98 f0       	brcs	.+38     	; 0x73c <__fp_cmp+0x46>
 716:	62 1b       	sub	r22, r18
 718:	73 0b       	sbc	r23, r19
 71a:	84 0b       	sbc	r24, r20
 71c:	95 0b       	sbc	r25, r21
 71e:	39 f4       	brne	.+14     	; 0x72e <__fp_cmp+0x38>
 720:	0a 26       	eor	r0, r26
 722:	61 f0       	breq	.+24     	; 0x73c <__fp_cmp+0x46>
 724:	23 2b       	or	r18, r19
 726:	24 2b       	or	r18, r20
 728:	25 2b       	or	r18, r21
 72a:	21 f4       	brne	.+8      	; 0x734 <__fp_cmp+0x3e>
 72c:	08 95       	ret
 72e:	0a 26       	eor	r0, r26
 730:	09 f4       	brne	.+2      	; 0x734 <__fp_cmp+0x3e>
 732:	a1 40       	sbci	r26, 0x01	; 1
 734:	a6 95       	lsr	r26
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	81 1d       	adc	r24, r1
 73a:	81 1d       	adc	r24, r1
 73c:	08 95       	ret

0000073e <__fp_split3>:
 73e:	57 fd       	sbrc	r21, 7
 740:	90 58       	subi	r25, 0x80	; 128
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	59 f0       	breq	.+22     	; 0x75e <__fp_splitA+0x10>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	71 f0       	breq	.+28     	; 0x768 <__fp_splitA+0x1a>
 74c:	47 95       	ror	r20

0000074e <__fp_splitA>:
 74e:	88 0f       	add	r24, r24
 750:	97 fb       	bst	r25, 7
 752:	99 1f       	adc	r25, r25
 754:	61 f0       	breq	.+24     	; 0x76e <__fp_splitA+0x20>
 756:	9f 3f       	cpi	r25, 0xFF	; 255
 758:	79 f0       	breq	.+30     	; 0x778 <__fp_splitA+0x2a>
 75a:	87 95       	ror	r24
 75c:	08 95       	ret
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	14 06       	cpc	r1, r20
 764:	55 1f       	adc	r21, r21
 766:	f2 cf       	rjmp	.-28     	; 0x74c <__fp_split3+0xe>
 768:	46 95       	lsr	r20
 76a:	f1 df       	rcall	.-30     	; 0x74e <__fp_splitA>
 76c:	08 c0       	rjmp	.+16     	; 0x77e <__fp_splitA+0x30>
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	18 06       	cpc	r1, r24
 774:	99 1f       	adc	r25, r25
 776:	f1 cf       	rjmp	.-30     	; 0x75a <__fp_splitA+0xc>
 778:	86 95       	lsr	r24
 77a:	71 05       	cpc	r23, r1
 77c:	61 05       	cpc	r22, r1
 77e:	08 94       	sec
 780:	08 95       	ret

00000782 <__fp_zero>:
 782:	e8 94       	clt

00000784 <__fp_szero>:
 784:	bb 27       	eor	r27, r27
 786:	66 27       	eor	r22, r22
 788:	77 27       	eor	r23, r23
 78a:	cb 01       	movw	r24, r22
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__gesf2>:
 790:	b2 df       	rcall	.-156    	; 0x6f6 <__fp_cmp>
 792:	08 f4       	brcc	.+2      	; 0x796 <__gesf2+0x6>
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	08 95       	ret

00000798 <__mulsf3>:
 798:	0b d0       	rcall	.+22     	; 0x7b0 <__mulsf3x>
 79a:	78 c0       	rjmp	.+240    	; 0x88c <__fp_round>
 79c:	69 d0       	rcall	.+210    	; 0x870 <__fp_pscA>
 79e:	28 f0       	brcs	.+10     	; 0x7aa <__mulsf3+0x12>
 7a0:	6e d0       	rcall	.+220    	; 0x87e <__fp_pscB>
 7a2:	18 f0       	brcs	.+6      	; 0x7aa <__mulsf3+0x12>
 7a4:	95 23       	and	r25, r21
 7a6:	09 f0       	breq	.+2      	; 0x7aa <__mulsf3+0x12>
 7a8:	5a c0       	rjmp	.+180    	; 0x85e <__fp_inf>
 7aa:	5f c0       	rjmp	.+190    	; 0x86a <__fp_nan>
 7ac:	11 24       	eor	r1, r1
 7ae:	ea cf       	rjmp	.-44     	; 0x784 <__fp_szero>

000007b0 <__mulsf3x>:
 7b0:	c6 df       	rcall	.-116    	; 0x73e <__fp_split3>
 7b2:	a0 f3       	brcs	.-24     	; 0x79c <__mulsf3+0x4>

000007b4 <__mulsf3_pse>:
 7b4:	95 9f       	mul	r25, r21
 7b6:	d1 f3       	breq	.-12     	; 0x7ac <__mulsf3+0x14>
 7b8:	95 0f       	add	r25, r21
 7ba:	50 e0       	ldi	r21, 0x00	; 0
 7bc:	55 1f       	adc	r21, r21
 7be:	62 9f       	mul	r22, r18
 7c0:	f0 01       	movw	r30, r0
 7c2:	72 9f       	mul	r23, r18
 7c4:	bb 27       	eor	r27, r27
 7c6:	f0 0d       	add	r31, r0
 7c8:	b1 1d       	adc	r27, r1
 7ca:	63 9f       	mul	r22, r19
 7cc:	aa 27       	eor	r26, r26
 7ce:	f0 0d       	add	r31, r0
 7d0:	b1 1d       	adc	r27, r1
 7d2:	aa 1f       	adc	r26, r26
 7d4:	64 9f       	mul	r22, r20
 7d6:	66 27       	eor	r22, r22
 7d8:	b0 0d       	add	r27, r0
 7da:	a1 1d       	adc	r26, r1
 7dc:	66 1f       	adc	r22, r22
 7de:	82 9f       	mul	r24, r18
 7e0:	22 27       	eor	r18, r18
 7e2:	b0 0d       	add	r27, r0
 7e4:	a1 1d       	adc	r26, r1
 7e6:	62 1f       	adc	r22, r18
 7e8:	73 9f       	mul	r23, r19
 7ea:	b0 0d       	add	r27, r0
 7ec:	a1 1d       	adc	r26, r1
 7ee:	62 1f       	adc	r22, r18
 7f0:	83 9f       	mul	r24, r19
 7f2:	a0 0d       	add	r26, r0
 7f4:	61 1d       	adc	r22, r1
 7f6:	22 1f       	adc	r18, r18
 7f8:	74 9f       	mul	r23, r20
 7fa:	33 27       	eor	r19, r19
 7fc:	a0 0d       	add	r26, r0
 7fe:	61 1d       	adc	r22, r1
 800:	23 1f       	adc	r18, r19
 802:	84 9f       	mul	r24, r20
 804:	60 0d       	add	r22, r0
 806:	21 1d       	adc	r18, r1
 808:	82 2f       	mov	r24, r18
 80a:	76 2f       	mov	r23, r22
 80c:	6a 2f       	mov	r22, r26
 80e:	11 24       	eor	r1, r1
 810:	9f 57       	subi	r25, 0x7F	; 127
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	8a f0       	brmi	.+34     	; 0x838 <__mulsf3_pse+0x84>
 816:	e1 f0       	breq	.+56     	; 0x850 <__mulsf3_pse+0x9c>
 818:	88 23       	and	r24, r24
 81a:	4a f0       	brmi	.+18     	; 0x82e <__mulsf3_pse+0x7a>
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	bb 1f       	adc	r27, r27
 822:	66 1f       	adc	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	88 1f       	adc	r24, r24
 828:	91 50       	subi	r25, 0x01	; 1
 82a:	50 40       	sbci	r21, 0x00	; 0
 82c:	a9 f7       	brne	.-22     	; 0x818 <__mulsf3_pse+0x64>
 82e:	9e 3f       	cpi	r25, 0xFE	; 254
 830:	51 05       	cpc	r21, r1
 832:	70 f0       	brcs	.+28     	; 0x850 <__mulsf3_pse+0x9c>
 834:	14 c0       	rjmp	.+40     	; 0x85e <__fp_inf>
 836:	a6 cf       	rjmp	.-180    	; 0x784 <__fp_szero>
 838:	5f 3f       	cpi	r21, 0xFF	; 255
 83a:	ec f3       	brlt	.-6      	; 0x836 <__mulsf3_pse+0x82>
 83c:	98 3e       	cpi	r25, 0xE8	; 232
 83e:	dc f3       	brlt	.-10     	; 0x836 <__mulsf3_pse+0x82>
 840:	86 95       	lsr	r24
 842:	77 95       	ror	r23
 844:	67 95       	ror	r22
 846:	b7 95       	ror	r27
 848:	f7 95       	ror	r31
 84a:	e7 95       	ror	r30
 84c:	9f 5f       	subi	r25, 0xFF	; 255
 84e:	c1 f7       	brne	.-16     	; 0x840 <__mulsf3_pse+0x8c>
 850:	fe 2b       	or	r31, r30
 852:	88 0f       	add	r24, r24
 854:	91 1d       	adc	r25, r1
 856:	96 95       	lsr	r25
 858:	87 95       	ror	r24
 85a:	97 f9       	bld	r25, 7
 85c:	08 95       	ret

0000085e <__fp_inf>:
 85e:	97 f9       	bld	r25, 7
 860:	9f 67       	ori	r25, 0x7F	; 127
 862:	80 e8       	ldi	r24, 0x80	; 128
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	08 95       	ret

0000086a <__fp_nan>:
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	80 ec       	ldi	r24, 0xC0	; 192
 86e:	08 95       	ret

00000870 <__fp_pscA>:
 870:	00 24       	eor	r0, r0
 872:	0a 94       	dec	r0
 874:	16 16       	cp	r1, r22
 876:	17 06       	cpc	r1, r23
 878:	18 06       	cpc	r1, r24
 87a:	09 06       	cpc	r0, r25
 87c:	08 95       	ret

0000087e <__fp_pscB>:
 87e:	00 24       	eor	r0, r0
 880:	0a 94       	dec	r0
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	14 06       	cpc	r1, r20
 888:	05 06       	cpc	r0, r21
 88a:	08 95       	ret

0000088c <__fp_round>:
 88c:	09 2e       	mov	r0, r25
 88e:	03 94       	inc	r0
 890:	00 0c       	add	r0, r0
 892:	11 f4       	brne	.+4      	; 0x898 <__fp_round+0xc>
 894:	88 23       	and	r24, r24
 896:	52 f0       	brmi	.+20     	; 0x8ac <__fp_round+0x20>
 898:	bb 0f       	add	r27, r27
 89a:	40 f4       	brcc	.+16     	; 0x8ac <__fp_round+0x20>
 89c:	bf 2b       	or	r27, r31
 89e:	11 f4       	brne	.+4      	; 0x8a4 <__fp_round+0x18>
 8a0:	60 ff       	sbrs	r22, 0
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <__fp_round+0x20>
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <_exit>:
 8ae:	f8 94       	cli

000008b0 <__stop_program>:
 8b0:	ff cf       	rjmp	.-2      	; 0x8b0 <__stop_program>
